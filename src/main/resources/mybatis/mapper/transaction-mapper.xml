<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.newdeal.ledger.transaction.mapper.TransactionMapper">

    <!-- 트랜잭션 결과 매핑 -->
    <resultMap id="TransactionResultMap" type="com.newdeal.ledger.transaction.dto.TransactionResponse$GetOne">
        <id column="transactionId" property="transactionId"/>
        <result column="email" property="email"/>
        <result column="subCategoryId" property="subCategoryId"/>
        <result column="categoryId" property="categoryId"/>
        <result column="transactionType" property="transactionType"/>
        <result column="sourceType" property="sourceType"/>
        <result column="sourceId" property="sourceId"/>
        <result column="keyword" property="keyword"/>
        <result column="amount" property="amount"/>
        <result column="installment" property="installment"/>
        <result column="imageUrl" property="imageUrl"/>
        <result column="memo" property="memo"/>
        <result column="time" property="time"/>
        <result column="repeatType" property="repeatType"/>
        <collection property="tagIdList" ofType="java.lang.Integer">
            <id column="tagId" property="tagId"/>
        </collection>
    </resultMap>

    <insert id="createTransaction" parameterType="map" useGeneratedKeys="true"
            keyProperty="request.transactionId">
        INSERT INTO `transaction`
        (
            `email`, `cno`, `type`, `stype`, `sno`, `keyword`,
            `samount`, `installment`, `imageUrl`, `tsmemo`,
            `time`, `rtype`
        )
        VALUES
            (
                #{email},
                #{request.subCategoryId},
                #{request.transactionType},
                #{request.sourceType},
                #{request.sourceId},
                #{request.keyword},
                #{request.amount},
                #{request.installment},
                #{request.imageUrl},
                #{request.memo},
                #{request.dateTime},
                #{request.repeatType}
            );
    </insert>

    <insert id="createTransactionByDto" parameterType="map" useGeneratedKeys="true"
            keyProperty="transactionDto.transactionId">
        INSERT INTO `transaction`
        (
            `email`, `cno`, `type`, `stype`, `sno`, `keyword`,
            `samount`, `installment`, `imageUrl`, `tsmemo`,
            `time`, `rtype`
        )
        VALUES
            (
                #{transactionDto.email},
                #{transactionDto.subCategoryId},
                #{transactionDto.transactionType},
                #{transactionDto.sourceType},
                #{transactionDto.sourceId},
                #{transactionDto.keyword},
                #{transactionDto.amount},
                #{transactionDto.installment},
                #{transactionDto.imageUrl},
                #{transactionDto.memo},
                #{transactionDto.time},
                #{transactionDto.repeatType}
            );
    </insert>

    <update id="updateTransactionById" parameterType="map">
        UPDATE `transaction`
        SET
            `cno` = #{request.subCategoryId},
            `type` = #{request.transactionType},
            `stype` = #{request.sourceType},
            `sno` = #{request.sourceId},
            `keyword` = #{request.keyword},
            `samount` = #{request.amount},
            `installment` = #{request.installment},
            `imageUrl` = #{request.imageUrl},
            `tsmemo` = #{request.memo},
            `time` = #{request.dateTime},
            `rtype` = #{request.repeatType}
        WHERE
            `tno` = #{transactionId}
    </update>

    <delete id="deleteTransactionById">
        DELETE
        FROM transaction
        WHERE tno = #{transactionId}
    </delete>

    <select id="findTransactionsByMonth" parameterType="map" resultType="com.newdeal.ledger.transaction.dto.TransactionResponse$GetList">
        SELECT
            t.tno AS transactionId,
            DATE (t.time) AS date,
            TIME (t.time) AS time,
            parent_c.name AS category,
            c.name AS subCategory,
            t.keyword AS keyword,
            t.samount AS amount,
            t.tsmemo as memo,
            CASE WHEN t.installment != 1 THEN '할부' ELSE '' END AS installment,
            GROUP_CONCAT(tg.name SEPARATOR ', ') AS tags
        FROM
            transaction t
        JOIN
            category c ON t.cno = c.cno
        JOIN
            category parent_c ON c.parent_cno = parent_c.cno
        LEFT JOIN
            transactiontag tstg ON t.tno = tstg.tsno
        LEFT JOIN
            tag tg ON tstg.tgno = tg.tno
        WHERE
            YEAR (t.time) = #{year}
        AND MONTH (t.time) = #{month}
        AND t.email = #{email}
        GROUP BY
        t.tno
        ORDER BY
        t.time desc;
    </select>

    <select id="findTransactionsByMultiFilter" parameterType="map" resultType="com.newdeal.ledger.transaction.dto.TransactionResponse$GetList">
        SELECT
        t.tno AS transactionId,
        DATE (t.time) AS date,
        TIME (t.time) AS time,
        parent_c.name AS category,
        c.name AS subCategory,
        t.keyword AS keyword,
        t.samount AS amount,
        t.tsmemo as memo,
        CASE WHEN t.installment != 1 THEN '할부' ELSE '' END AS installment,
        GROUP_CONCAT(tg.name SEPARATOR ', ') AS tags
        FROM
        transaction t
        JOIN
        category c ON t.cno = c.cno
        JOIN
        category parent_c ON c.parent_cno = parent_c.cno
        LEFT JOIN
        transactiontag tstg ON t.tno = tstg.tsno
        LEFT JOIN
        tag tg ON tstg.tgno = tg.tno
        WHERE
        YEAR (t.time) = #{request.year}
        AND MONTH (t.time) = #{request.month}
        AND t.email = #{email}
        <if test="request.subCategoryIds != null and !request.subCategoryIds.isEmpty()">
            AND c.cno IN
            <foreach item="subCategoryId" collection="request.subCategoryIds" open="(" separator="," close=")">
                #{subCategoryId}
            </foreach>
        </if>
        <if test="request.tagIds != null and !request.tagIds.isEmpty()">
            AND t.tno IN (
            SELECT tsno FROM transactiontag tstg
            WHERE tstg.tgno IN
            <foreach item="tagId" collection="request.tagIds" open="(" separator="," close=")">
                #{tagId}
            </foreach>
            )
        </if>
        <if test="request.installment != null and !request.installment.isEmpty()">
            AND t.installment IN
            <foreach item="inst" collection="request.installment" open="(" separator="," close=")">
                #{inst}
            </foreach>
        </if>
        <if test="request.repeatType != null and !request.repeatType.isEmpty()">
            AND t.rtype IN
            <foreach item="rt" collection="request.repeatType" open="(" separator="," close=")">
                #{rt}
            </foreach>
        </if>
        <if test="request.sourceType != null and !request.sourceType.isEmpty()">
            AND t.stype IN
            <foreach item="st" collection="request.sourceType" open="(" separator="," close=")">
                #{st}
            </foreach>
        </if>
        <if test="request.sourceIds != null and !request.sourceIds.isEmpty()">
            AND t.sno IN
            <foreach item="sn" collection="request.sourceIds" open="(" separator="," close=")">
                #{sn}
            </foreach>
        </if>
        <if test="request.keyword != null and !request.keyword.isEmpty()">
            AND t.keyword LIKE CONCAT('%', #{request.keyword}, '%')
        </if>
        GROUP BY
        t.tno
        ORDER BY
        t.time desc;
    </select>




    <select id="findTransactionById" parameterType="int" resultMap="TransactionResultMap">
        SELECT
            t.tno AS transactionId,
            t.email,
            t.cno AS subCategoryId,
            c.parent_cno AS categoryId,
            t.type AS transactionType,
            t.stype AS sourceType,
            t.sno AS sourceId,
            t.keyword,
            t.samount AS amount,
            t.installment,
            t.imageUrl,
            t.tsmemo AS memo,
            t.time,
            t.rtype AS repeatType,
            tt.tgno AS tagId
        FROM
            `transaction` t
                LEFT JOIN
            `category` c ON t.cno = c.cno
                LEFT JOIN
            `transactiontag` tt ON t.tno = tt.tsno
        WHERE
            t.tno = #{transactionId}
    </select>

    <!-- TransactionDto를 찾기 위한 SQL문 -->
    <select id="findTransactionDtoById" resultType="com.newdeal.ledger.transaction.dto.TransactionDto">
        SELECT tno         AS transactionId,
               email       AS email,
               cno         AS subCategoryId,
               type        AS transactionType,
               stype       AS sourceType,
               sno         AS sourceId,
               keyword     AS keyword,
               samount     AS amount,
               installment AS installment,
               imageUrl    AS imageUrl,
               tsmemo      AS memo, time AS time, rtype AS repeatType
        FROM `transaction`
        WHERE tno = #{transactionId}
    </select>

    <select id="findRepeatTypeTransactionDto" resultType="com.newdeal.ledger.transaction.dto.TransactionDto">
        SELECT tno         AS transactionId,
               email       AS email,
               cno         AS subCategoryId,
               type        AS transactionType,
               stype       AS sourceType,
               sno         AS sourceId,
               keyword     AS keyword,
               samount     AS amount,
               installment AS installment,
               imageUrl    AS imageUrl,
               tsmemo      AS memo, time AS time, rtype AS repeatType
        FROM `transaction`
        WHERE
            (`rtype` = 'WEEKLY'
          AND DATE (`time`) = DATE_SUB(CURDATE()
            , INTERVAL 1 WEEK))
           OR
            (`rtype` = 'MONTHLY'
          AND DATE (`time`) = DATE_SUB(CURDATE()
            , INTERVAL 1 MONTH));
    </select>

    <insert id="createTransactionTag" parameterType="map">
        INSERT INTO `transactiontag` (tsno, tgno)
        VALUES
        <foreach collection="tagIdList" item="tagId" separator=",">
            (#{transactionId}, #{tagId})
        </foreach>
    </insert>

    <delete id="deleteTransactionTagByTransactionId" parameterType="int">
        DELETE FROM `transactiontag`
        WHERE `tsno` = #{transactionId}
    </delete>

    <select id="findTransactionTagByTransactionId"  resultType = "com.newdeal.ledger.transaction.dto.TransactionTagDto"  parameterType="int">
        SELECT tsno AS transactionId,
               tgno   AS tagId
        FROM `transactiontag`
        WHERE tsno = #{transactionId}
    </select>

    <select id="findSourcesByEmail" parameterType="String" resultType="com.newdeal.ledger.transaction.dto.SourceDto">
        SELECT 'ACCOUNT' as sourceType,
               CASE type
                   WHEN 'MONEY' THEN 'MONEY'
                   ELSE 'ACCOUNT'
                   END as subSourceType,
               ano as sno,
               cname
        FROM account
        WHERE email = #{email}
        UNION
        SELECT 'CARD' as sourceType,
               CASE type
                   WHEN 'CREDIT' THEN 'CREDIT'
                   ELSE 'CHECK'
                   END as subSourceType,
               cno as sno,
               cname
        FROM card
        WHERE email = #{email}
    </select>

</mapper>
