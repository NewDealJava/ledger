<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.newdeal.ledger.transaction.mapper.TransactionMapper">

    <!-- 트랜잭션 결과 매핑 -->
    <resultMap id="TransactionResultMap" type="com.newdeal.ledger.transaction.dto.TransactionResponse$GetOne">
        <id column="transactionId" property="transactionId"/>
        <result column="email" property="email"/>
        <result column="subCategoryId" property="subCategoryId"/>
        <result column="categoryId" property="categoryId"/>
        <result column="transactionType" property="transactionType"/>
        <result column="sourceType" property="sourceType"/>
        <result column="sourceId" property="sourceId"/>
        <result column="keyword" property="keyword"/>
        <result column="amount" property="amount"/>
        <result column="installment" property="installment"/>
        <result column="imageUrl" property="imageUrl"/>
        <result column="memo" property="memo"/>
        <result column="time" property="time"/>
        <result column="repeatType" property="repeatType"/>
        <collection property="tagIdList" ofType="java.lang.Integer">
            <id column="tagId" property="tagId"/>
        </collection>
    </resultMap>

    <!-- 트랜잭션과 태그를 조인하여 단일 트랜잭션을 가져오기 -->
    <select id="selectTransactionById" parameterType="int" resultMap="TransactionResultMap">
        SELECT
            t.tno AS transactionId,
            t.email,
            t.cno AS subCategoryId,
            c.parent_cno AS categoryId,
            t.type AS transactionType,
            t.stype AS sourceType,
            t.sno AS sourceId,
            t.keyword,
            t.samount AS amount,
            t.installment,
            t.imageUrl,
            t.tsmemo AS memo,
            t.time,
            t.rtype AS repeatType,
            tt.tgno AS tagId
        FROM
            `transaction` t
                LEFT JOIN
            `category` c ON t.cno = c.cno
                LEFT JOIN
            `transactiontag` tt ON t.tno = tt.tsno
        WHERE
            t.tno = #{transactionId}
    </select>




    <select id="findAllByMonth" parameterType="map" resultType="com.newdeal.ledger.transaction.dto.TransactionListDto">
        SELECT
            t.tno,
            DATE (t.time) AS date,
            TIME (t.time) AS time,
            parent_c.name AS category,
            c.name AS subCategory,
            t.keyword AS keyword,
            t.samount AS amount,
            t.tsmemo as memo,
            CASE WHEN t.installment != 1 THEN '할부' ELSE '' END AS installment,
            GROUP_CONCAT(tg.name SEPARATOR ', ') AS tags
        FROM
            transaction t
        JOIN
            category c ON t.cno = c.cno
        JOIN
            category parent_c ON c.parent_cno = parent_c.cno
        LEFT JOIN
            transactiontag tstg ON t.tno = tstg.tsno
        LEFT JOIN
            tag tg ON tstg.tgno = tg.tno
        WHERE
            YEAR (t.time) = #{year}
            AND MONTH (t.time) = #{month}
            AND t.email = #{email}
        GROUP BY
        t.tno;
    </select>


    <select id="findAllSourceByEmail" parameterType="String" resultType="com.newdeal.ledger.transaction.dto.SourceDto">
        SELECT 'ACCOUNT' as sourceType,
               CASE type
                   WHEN 'MONEY' THEN 'MONEY'
                   ELSE 'ACCOUNT'
                   END as subSourceType,
               ano as sno,
               cname
        FROM account
        WHERE email = #{email}
        UNION
        SELECT 'CARD' as sourceType,
               CASE type
                   WHEN 'CREDIT' THEN 'CREDIT'
                   ELSE 'CHECK'
                   END as subSourceType,
               cno as sno,
               cname
        FROM card
        WHERE email = #{email}
    </select>

    <insert id="createTransaction" parameterType="map" useGeneratedKeys="true"
            keyProperty="request.transactionId">
        INSERT INTO `transaction`
        (
        `email`, `cno`, `type`, `stype`, `sno`, `keyword`,
        `samount`, `installment`, `imageUrl`, `tsmemo`,
        `time`, `rtype`
        )
        VALUES
        (
        #{email},
        #{request.subCategoryId},
        #{request.transactionType},
        #{request.sourceType},
        #{request.sourceId},
        #{request.keyword},
        #{request.amount},
        #{request.installment},
        #{request.imageUrl},
        #{request.memo},
        #{request.dateTime},
        #{request.repeatType}
        );

    </insert>

    <insert id="createTransactionTag" parameterType="map">
        INSERT INTO `transactiontag` (tsno, tgno)
        VALUES
        <foreach collection="tagIdList" item="tagId" separator=",">
            (#{transactionId}, #{tagId})
        </foreach>
    </insert>

    <delete id="deleteTransactionTagByTransactionId" parameterType="int">
        DELETE FROM `transactiontag`
        WHERE `tsno` = #{transactionId}
    </delete>

    <!-- TransactionDto를 찾기 위한 SQL문 -->
    <select id="findTransactionById" resultType="com.newdeal.ledger.transaction.dto.TransactionDto">
        SELECT
            tno,
            email,
            cno,
            type,
            stype,
            sno,
            keyword,
            samount,
            installment,
            imageUrl,
            tsmemo,
            time,
            rtype
        FROM `transaction`
        WHERE tno = #{transactionId}
    </select>

    <update id="updateTransactionById" parameterType="map">
        UPDATE `transaction`
        SET
            `cno` = #{request.subCategoryId},
            `type` = #{request.transactionType},
            `stype` = #{request.sourceType},
            `sno` = #{request.sourceId},
            `keyword` = #{request.keyword},
            `samount` = #{request.amount},
            `installment` = #{request.installment},
            `imageUrl` = #{request.imageUrl},
            `tsmemo` = #{request.memo},
            `time` = #{request.dateTime},
            `rtype` = #{request.repeatType}
        WHERE
            `tno` = #{transactionId}
    </update>

</mapper>
